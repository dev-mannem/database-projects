conn dba643/Hang2md

--drop users
DROP USER AdminA CASCADE;
DROP USER AdminB CASCADE;
DROP USER AdminS CASCADE;
DROP USER AdminT CASCADE;
DROP USER RDavison CASCADE;
DROP USER SSEYmour CASCADE;
DROP USER THemming CASCADE;
DROP USER KMcCain CASCADE;


--create users
Create USER AdminA IDENTIFIED BY AdminA
DEFAULT TABLESPACE IA643_TBS
TEMPORARY TABLESPACE TEMP
ACCOUNT UNLOCK;

GRANT CONNECT, RESOURCE TO AdminA;


Create USER AdminB IDENTIFIED BY AdminB
DEFAULT TABLESPACE IA643_TBS
TEMPORARY TABLESPACE TEMP
ACCOUNT UNLOCK;

GRANT CONNECT, RESOURCE TO AdminB;


Create USER AdminS IDENTIFIED BY AdminS
DEFAULT TABLESPACE IA643_TBS
TEMPORARY TABLESPACE TEMP
ACCOUNT UNLOCK;

GRANT CONNECT, RESOURCE TO AdminS;


Create USER AdminT IDENTIFIED BY AdminT
DEFAULT TABLESPACE IA643_TBS
TEMPORARY TABLESPACE TEMP
ACCOUNT UNLOCK;

GRANT CONNECT, RESOURCE TO AdminT;


Create USER RDavison IDENTIFIED BY RDavison
DEFAULT TABLESPACE IA643_TBS
TEMPORARY TABLESPACE TEMP
ACCOUNT UNLOCK;

GRANT CONNECT, RESOURCE TO RDavison;


Create USER SSEYmour IDENTIFIED BY SSeymour
DEFAULT TABLESPACE IA643_TBS
TEMPORARY TABLESPACE TEMP
ACCOUNT UNLOCK;

GRANT CONNECT, RESOURCE TO SSEYmour;


Create USER THemming IDENTIFIED BY THemming
DEFAULT TABLESPACE IA643_TBS
TEMPORARY TABLESPACE TEMP
ACCOUNT UNLOCK;

GRANT CONNECT, RESOURCE TO THemming;


Create USER KMcCain IDENTIFIED BY KMcCain
DEFAULT TABLESPACE IA643_TBS
TEMPORARY TABLESPACE TEMP
ACCOUNT UNLOCK;

GRANT CONNECT, RESOURCE TO KMcCain;


/*
--this part should be executed in sys account

DROP USER sysadmin_ctx CASCADE;

CREATE USER sysadmin_ctx IDENTIFIED BY sysadminctx;
GRANT CREATE SESSION, CREATE ANY CONTEXT, CREATE PROCEDURE, 
CREATE TRIGGER, ADMINISTER DATABASE TRIGGER 
TO sysadmin_ctx IDENTIFIED BY sysadminctx;
GRANT EXECUTE ON DBMS_SESSION TO sysadmin_ctx;
GRANT EXECUTE ON DBMS_RLS TO sysadmin_ctx;
GRANT RESOURCE TO sysadmin_ctx;
/

*/


---drop triggers---
DROP TRIGGER Administrator_Trigger;
DROP TRIGGER Clinic_Trigger;
DROP TRIGGER Doctor_Trigger;
DROP TRIGGER Patient_Trigger;
DROP TRIGGER Visit_Trigger;
DROP TRIGGER Diagnosis_Trigger;
DROP TRIGGER AppUser_Trigger;


---create triggers---
CREATE OR REPLACE TRIGGER Administrator_Trigger
BEFORE INSERT OR UPDATE ON Administrator
FOR EACH ROW
BEGIN
:new.CTL_SEC_USER := USER;
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER Clinic_Trigger
BEFORE INSERT OR UPDATE ON Clinic
FOR EACH ROW
BEGIN
:new.CTL_SEC_USER := USER;
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER Doctor_Trigger
BEFORE INSERT OR UPDATE ON Doctor
FOR EACH ROW
BEGIN
:new.CTL_SEC_USER := USER;
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER Patient_Trigger
BEFORE INSERT ON Patient
FOR EACH ROW
BEGIN
:new.CTL_SEC_USER := USER;
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER Visit_Trigger
BEFORE INSERT ON Visit
FOR EACH ROW
BEGIN
:new.CTL_SEC_USER := USER;
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER Diagnosis_Trigger
BEFORE INSERT ON Diagnosis
FOR EACH ROW
BEGIN
:new.CTL_SEC_USER := USER;
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER AppUser_Trigger
BEFORE INSERT OR UPDATE ON App_User
FOR EACH ROW
BEGIN
:new.CTL_SEC_USER := USER;
END;
/
SHOW ERRORS;

--drop roles
DROP ROLE Admin_R;
DROP ROLE Doctor_R;

--create roles
CREATE ROLE Admin_R;
CREATE ROLE Doctor_R;

--drop synonyms
DROP PUBLIC SYNONYM Administrator;
DROP PUBLIC SYNONYM Clinic;
DROP PUBLIC SYNONYM Doctor;
DROP PUBLIC SYNONYM Patient;
DROP PUBLIC SYNONYM Visit;
DROP PUBLIC SYNONYM Diagnosis;

--create synonyms and grant privileges
CREATE PUBLIC SYNONYM Administrator FOR DBA643.Administrator;
GRANT SELECT, INSERT, UPDATE, DELETE 
ON Administrator TO Admin_R;
GRANT SELECT ON Administrator TO Doctor_R;

CREATE PUBLIC SYNONYM Clinic FOR DBA643.Clinic;
GRANT SELECT, INSERT, UPDATE, DELETE 
ON Clinic TO Admin_R;
GRANT SELECT ON Clinic TO Doctor_R;

CREATE PUBLIC SYNONYM Doctor FOR DBA643.Doctor;
GRANT SELECT, INSERT, UPDATE, DELETE 
ON Doctor TO Admin_R;
GRANT SELECT ON Doctor TO Doctor_R;

CREATE PUBLIC SYNONYM Patient FOR DBA643.Patient;
GRANT SELECT, INSERT, UPDATE, DELETE 
ON Patient TO Doctor_R;

CREATE PUBLIC SYNONYM Visit FOR DBA643.Visit;
GRANT SELECT, INSERT, UPDATE, DELETE 
ON Visit TO Doctor_R;

CREATE PUBLIC SYNONYM Diagnosis FOR DBA643.Diagnosis;
GRANT SELECT, INSERT, UPDATE, DELETE 
ON Diagnosis TO Doctor_R;

GRANT Admin_R TO AdminA, AdminB, AdminS, AdminT;
GRANT Doctor_R TO RDavison, SSEYmour, THemming, KMcCain;

GRANT SELECT ON Doctor to sysadmin_ctx;
GRANT SELECT ON App_User to sysadmin_ctx;

--creating context
conn sysadmin_ctx/sysadminctx

CREATE OR REPLACE CONTEXT ClinicId_Req USING Clinic_Id_Req_PKG;

CREATE OR REPLACE PACKAGE Clinic_Id_Req_PKG IS
PROCEDURE Get_ClinicID;
END;
/

CREATE OR REPLACE PACKAGE BODY Clinic_Id_Req_PKG IS
PROCEDURE Get_ClinicID IS
ClinicId Number;
UserType CHAR(1);
BEGIN
SELECT USER_TYPE INTO UserType FROM DBA643.App_User 
WHERE UPPER(APP_USERNAME) = SYS_CONTEXT('USERENV','SESSION_USER');

IF UserType = 'D' THEN
SELECT Clinic_ID INTO ClinicId FROM DBA643.Doctor 
WHERE Doctor_ID IN ( 
SELECT EMP_ID FROM DBA643.App_User 
WHERE UPPER(APP_USERNAME) = SYS_CONTEXT('USERENV','SESSION_USER'));
ELSE 
ClinicId := 0;
END IF;

DBMS_SESSION.SET_CONTEXT('CLINICID_REQ','ClinicID',ClinicId);

END;
END;
/
SHOW ERRORS;


--logon trigger
CREATE OR REPLACE TRIGGER After_Logon_Trigger
AFTER LOGON ON DATABASE
BEGIN
sysadmin_ctx.Clinic_Id_Req_PKG.Get_ClinicID;
END;
/
SHOW ERRORS;

conn dba643/Hang2md
--creating policy functions

CREATE OR REPLACE FUNCTION Admin_Policy_Fun (
P_Schema_Name IN VARCHAR2, 
P_Object_Name IN VARCHAR2 )
RETURN VARCHAR2 IS
Ret_Var VARCHAR2(300);
U_Type CHAR(1);
BEGIN
SELECT USER_TYPE INTO U_Type FROM DBA643.APP_USER WHERE UPPER(APP_USERNAME) = SYS_CONTEXT('USERENV', 'SESSION_USER');
IF USER = 'DBA643' or U_Type ='D' THEN
Ret_Var := '';
ELSE
Ret_Var := 'CTL_SEC_USER = USER';
END IF;
RETURN Ret_Var;
END;
/
SHOW ERRORS;


CREATE OR REPLACE FUNCTION Patient_Policy_Fun (
P_Schema_Name IN VARCHAR2,
P_Object_Name IN VARCHAR2 )
RETURN VARCHAR2 IS
Ret_Var VARCHAR2(300);
U_Type CHAR(1);
BEGIN
SELECT USER_TYPE INTO U_Type FROM DBA643.APP_USER WHERE UPPER(APP_USERNAME) = SYS_CONTEXT('USERENV', 'SESSION_USER');
IF USER = 'DBA643' THEN
Ret_Var := '';
ELSIF U_Type = 'D' THEN
Ret_Var := 'DOCTOR_ID IN (SELECT DOCTOR_ID FROM DOCTOR WHERE CLINIC_ID = ' || NVL(SYS_CONTEXT('CLINICID_REQ','ClinicID'),0) || ')';
ELSE
Ret_Var := 'CTL_SEC_USER = USER';
END IF;
RETURN Ret_Var;
END;
/
SHOW ERRORS;


CREATE OR REPLACE FUNCTION Visit_Policy_Fun (
P_Schema_Name IN VARCHAR2,
P_Object_Name IN VARCHAR2 )
RETURN VARCHAR2 IS
Ret_Var VARCHAR2(300);
U_Type CHAR(1);
BEGIN
SELECT USER_TYPE INTO U_Type FROM DBA643.APP_USER WHERE UPPER(APP_USERNAME) = SYS_CONTEXT('USERENV', 'SESSION_USER');
IF USER = 'DBA643' THEN
Ret_Var := '';
ELSIF U_Type = 'D' THEN
Ret_Var := 'PATIENT_ID IN (SELECT PATIENT_ID FROM  PATIENT P, DOCTOR D WHERE P.DOCTOR_ID = D.DOCTOR_ID AND D.CLINIC_ID = ' || NVL(SYS_CONTEXT('CLINICID_REQ','ClinicID'),0) || ')';
ELSE
Ret_Var := 'CTL_SEC_USER = USER';
END IF;
RETURN Ret_Var;
END;
/
SHOW ERRORS;


CREATE OR REPLACE FUNCTION Diagnosis_Policy_Fun (
P_Schema_Name IN VARCHAR2,
P_Object_Name IN VARCHAR2 )
RETURN VARCHAR2 IS
Ret_Var VARCHAR2(300);
U_Type CHAR(1);
BEGIN
SELECT USER_TYPE INTO U_Type FROM DBA643.APP_USER WHERE UPPER(APP_USERNAME) = SYS_CONTEXT('USERENV', 'SESSION_USER');
IF USER = 'DBA643' THEN
Ret_Var := '';
ELSIF U_Type = 'D' THEN
Ret_Var := 'VISIT_ID IN (SELECT VISIT_ID FROM VISIT V, PATIENT P, DOCTOR D, CLINIC C WHERE V.PATIENT_ID = P.PATIENT_ID AND P.DOCTOR_ID = D.DOCTOR_ID AND D.CLINIC_ID = C.CLINIC_ID AND C.CLINIC_ID = ' || SYS_CONTEXT('CLINICID_REQ','ClinicID') || ')';
ELSE
Ret_Var := 'CTL_SEC_USER = USER';
END IF;
RETURN Ret_Var;
END;
/
SHOW ERRORS;


EXEC DBMS_RLS.DROP_POLICY ('DBA643', 'Administrator', 'Administrator_Policy_Name' );
EXEC DBMS_RLS.DROP_POLICY ('DBA643', 'Clinic', 'Clinic_Policy_Name' );
EXEC DBMS_RLS.DROP_POLICY ('DBA643', 'Doctor', 'Doctor_Policy_Name' );
EXEC DBMS_RLS.DROP_POLICY ('DBA643', 'Patient', 'Patient_Policy_Name' );
EXEC DBMS_RLS.DROP_POLICY ('DBA643', 'Visit', 'Visit_Policy_Name' );
EXEC DBMS_RLS.DROP_POLICY ('DBA643', 'Diagnosis', 'Diagnosis_Policy_Name' );


EXEC DBMS_RLS.ADD_Policy ('DBA643', 'Administrator', 'Administrator_Policy_Name', 'DBA643', 'Admin_Policy_Fun', 'SELECT, INSERT, UPDATE, DELETE',TRUE);
EXEC DBMS_RLS.ADD_Policy ('DBA643', 'Clinic', 'Clinic_Policy_Name', 'DBA643', 'Admin_Policy_Fun', 'SELECT, INSERT, UPDATE, DELETE',TRUE);
EXEC DBMS_RLS.ADD_Policy ('DBA643', 'Doctor', 'Doctor_Policy_Name', 'DBA643', 'Admin_Policy_Fun', 'SELECT, INSERT, UPDATE, DELETE',TRUE);
EXEC DBMS_RLS.ADD_Policy ('DBA643', 'Patient', 'Patient_Policy_Name', 'DBA643', 'Patient_Policy_Fun', 'SELECT, INSERT, UPDATE, DELETE',TRUE);
EXEC DBMS_RLS.ADD_Policy ('DBA643', 'Visit', 'Visit_Policy_Name', 'DBA643', 'Visit_Policy_Fun', 'SELECT, INSERT, UPDATE, DELETE',TRUE);
EXEC DBMS_RLS.ADD_Policy ('DBA643', 'Diagnosis', 'Diagnosis_Policy_Name', 'DBA643', 'Diagnosis_Policy_Fun', 'SELECT, INSERT, UPDATE, DELETE',TRUE);
